(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(){function t(e){var n=e.item,r=e.handleCardClick,o=e.templateSelector,i=e.userId,a=e.handlerOpenDeletePopup,u=e.handlerLikeAdd;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._item=n,this._title=n.name,this._image=n.link,this._alt=n.name,this._likes=n.likes,this._ownerId=n.owner._id,this.cardId=n._id,this._userId=i,this._templateSelector=document.querySelector(o),this._handleCardClick=r,this.handlerOpenDeletePopup=a,this._handlerLikeAdd=u}var n,r;return n=t,(r=[{key:"_getTemplate",value:function(){return this._templateSelector.content.querySelector(".card").cloneNode(!0)}},{key:"_setEventListeners",value:function(){var e=this;this._element.querySelector(".card__button").addEventListener("click",(function(){e._handlerLikeAdd(e)})),this._element.querySelector(".card__remove-button").addEventListener("click",(function(){e.handlerOpenDeletePopup()})),this._element.querySelector(".card__image").addEventListener("click",(function(){e._handleCardClick(e._image,e._title)}))}},{key:"_deleteButton",value:function(){this._ownerId===this._userId&&this._element.querySelector(".card__remove-button").classList.add("card__remove-button_visible")}},{key:"likeContains",value:function(){return this._isLikeContains}},{key:"handlerLike",value:function(e){var t=this;this._isLikeContains=e.likes.some((function(e){return e._id===t._userId})),this._element.querySelector(".card__botton-counter").textContent=e.likes.length,this._isLikeContains?this._element.querySelector(".card__button").classList.add("card__button_active"):this._element.querySelector(".card__button").classList.remove("card__button_active")}},{key:"handlerDeleteCard",value:function(){this._element.remove()}},{key:"handlerCardIdReturn",value:function(){return this.cardId}},{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._setEventListeners(),this._deleteButton(),this.handlerLike(this._item),this._element.querySelector(".card__title").textContent=this._title,this._element.querySelector(".card__image").src=this._image,this._element.querySelector(".card__image").alt=this._alt,this._element}}])&&e(n.prototype,r),t}();function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var o=function(){function e(t,n){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r(this,"_showInputError",(function(e,t){var n=o._form.querySelector(".".concat(e.id,"-error"));e.classList.add(o._inputErrorClass),n.textContent=t,n.classList.add(o._errorClass)})),r(this,"_hideInputError",(function(e){var t=o._form.querySelector(".".concat(e.id,"-error"));e.classList.remove(o._inputErrorClass),t.classList.remove(o._errorClass),t.textContent=""})),r(this,"_сheckInputValidity",(function(e){!e.validity.valid||e.validity.typeMismatch?o._showInputError(e,e.validationMessage):o._hideInputError(e)})),r(this,"_setEventListener",(function(){o._toggleButtonState(),o._handlerEneterClickRemove(),o._inputList.forEach((function(e){e.addEventListener("input",(function(){o._сheckInputValidity(e),o._toggleButtonState()}))}))})),r(this,"_toggleButtonState",(function(){o._hasInvalidInput()?o._buttonElement.classList.add(o._inactiveButtonClass):o._buttonElement.classList.remove(o._inactiveButtonClass)})),r(this,"_hasInvalidInput",(function(){return o._inputList.some((function(e){return!e.validity.valid}))})),r(this,"enableValidation",(function(){o._setEventListener(),o._form.addEventListener("submit",(function(e){e.preventDefault()}))})),this._form=n,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._buttonElement=this._form.querySelector(this._submitButtonSelector)}var t,o;return t=e,(o=[{key:"resetValidation",value:function(){var e=this;this._toggleButtonState(),this._inputList.forEach((function(t){e._hideInputError(t)}))}},{key:"_handlerEneterClickRemove",value:function(){this._form.addEventListener("keydown",this._enterClickRemove)}},{key:"_enterClickRemove",value:function(e){"Enter"===e.key&&e.preventDefault()}}])&&n(t.prototype,o),e}();function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderedItems=r,this._renderer=o,this._container=n}var t,n;return t=e,(n=[{key:"renderItems",value:function(e){var t=this;e.forEach((function(e){t._renderer(e)}))}},{key:"addItem",value:function(e){this._container.append(e)}}])&&i(t.prototype,n),e}();function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var c=function(){function e(t){var n=t.userName,r=t.userJob,o=t.userAvatar;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._titleName=document.querySelector(n),this._subtitlJob=document.querySelector(r),this._userAvatar=document.querySelector(o)}var t,n;return t=e,(n=[{key:"setUserInfo",value:function(e){this._titleName.textContent=e.name,this._subtitlJob.textContent=e.about,this._userAvatar.src=e.avatar,this._userId=e._id}},{key:"getUserInfo",value:function(){return{name:this._titleName.textContent,about:this._subtitlJob.textContent,avatar:this._userAvatar,userId:this._userId}}}])&&u(t.prototype,n),e}();function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=document.querySelector(t),this._handlerEscClose=this._handlerEscClose.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_open"),document.addEventListener("keydown",this._handlerEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_open"),document.removeEventListener("keydown",this._handlerEscClose)}},{key:"_handlerEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"_handleCloseOverlay",value:function(e){(e.target.classList.contains("popup")||e.target.classList.contains("popup__close-button"))&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("click",(function(t){e._handleCloseOverlay(t)}))}}])&&s(t.prototype,n),e}();function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function h(e,t,n){return(h="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=y(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function y(e){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var v=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=y(r);if(o){var n=y(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return _(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._imagePopup=t._popup.querySelector(".popup__image"),t._titlePopup=t._popup.querySelector(".popup__subtitle"),t}return t=a,(n=[{key:"open",value:function(e,t){this._titlePopup.textContent=t,this._imagePopup.src=e,this._imagePopup.alt=t,h(y(a.prototype),"open",this).call(this)}}])&&p(t.prototype,n),a}(l);function m(e){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function g(e,t,n){return(g="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=E(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function k(e,t){return(k=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function S(e,t){return!t||"object"!==m(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function E(e){return(E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var C=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&k(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=E(r);if(o){var n=E(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return S(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._form=n._popup.querySelector(".form"),n._handleFormSubmit=t,n._button=n._popup.querySelector(".form__save-button"),n._inputList=n._form.querySelectorAll(".form__user-info"),n}return t=a,(n=[{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("submit",(function(t){t.preventDefault(),e.renderLoading(!0),e._handleFormSubmit(e._getInputValues())})),g(E(a.prototype),"setEventListeners",this).call(this)}},{key:"_getInputValues",value:function(){var e=this;return this._formValues={},this._inputList.forEach((function(t){return e._formValues[t.name]=t.value})),this._formValues}},{key:"close",value:function(){g(E(a.prototype),"close",this).call(this),this._form.reset()}},{key:"renderLoading",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Сохранить";this._button.textContent=e?"Сохранение...":t}}])&&b(t.prototype,n),a}(l);function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var L=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._url=t.url,this._headers=t.headers}var t,n;return t=e,(n=[{key:"_checkResponse",value:function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}},{key:"getInitialCards",value:function(){return fetch("".concat(this._url,"/cards"),{method:"GET",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"postCards",value:function(e){return fetch("".concat(this._url,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._checkResponse)}},{key:"handlerdeleteCards",value:function(e){return fetch("".concat(this._url,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then(this._checkResponse)}},{key:"changeLikeCard",value:function(e,t){return fetch("".concat(this._url,"/cards/likes/").concat(e),{method:t?"DELETE":"PUT",headers:this._headers}).then(this._checkResponse)}},{key:"getUserInfoFromServer",value:function(){return fetch("".concat(this._url,"/users/me"),{method:"GET",headers:this._headers}).then(this._checkResponse)}},{key:"updateUserData",value:function(e){return fetch("".concat(this._url,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})}).then(this._checkResponse)}},{key:"updateUserAvatar",value:function(e){return fetch("".concat(this._url,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.link})}).then(this._checkResponse)}}])&&w(t.prototype,n),e}();function O(e){return(O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function P(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function I(e,t,n){return(I="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=q(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function j(e,t){return(j=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function R(e,t){return!t||"object"!==O(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function q(e){return(q=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var T,A=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&j(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=q(r);if(o){var n=q(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return R(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._botton=t._popup.querySelector(".popup__save-button"),t}return t=a,(n=[{key:"handleFormDelete",value:function(e){this._handleFormSubmit=e}},{key:"setEventListeners",value:function(){var e=this;I(q(a.prototype),"setEventListeners",this).call(this),this._popup.addEventListener("submit",(function(t){t.preventDefault(),e.renderLoading(!0),e._handleFormSubmit()}))}},{key:"renderLoading",value:function(e){this._botton.textContent=e?"Удаление...":"Да"}}])&&P(t.prototype,n),a}(l),B=document.querySelector(".grid-galery"),D=document.querySelector(".profile__edit-button"),x=document.querySelector(".profile__add-button"),V=document.querySelector(".popup_type_edit"),U=V.querySelector(".form"),N=V.querySelector(".form__user-info_user_name"),F=V.querySelector(".form__user-info_user_job"),J=document.querySelector(".popup_type_new-card").querySelector(".form"),M=document.querySelector(".profile__avatar"),G=document.querySelector(".popup_type_avatar").querySelector(".form"),H={formSelector:".form",inputSelector:".form__user-info",submitButtonSelector:".form__save-button",inactiveButtonClass:"form__save-button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"form__error_visible"};function z(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var $=new o(H,J),K=new o(H,U),Q=new o(H,G);$.enableValidation(),K.enableValidation(),Q.enableValidation();var W=new L({url:"https://mesto.nomoreparties.co/v1/cohort-26",headers:{authorization:"bf09fd5b-3c45-4e70-9b69-806c8df2b150","Content-Type":"application/json"}}),X=new c({userName:".profile__name",userJob:".profile__career",userAvatar:".profile__avatar"}),Y=new C(".popup_type_edit",(function(e){W.updateUserData(e).then((function(e){X.setUserInfo(e),Y.close()})).catch((function(e){console.log(e)})).finally((function(){Y.renderLoading(!1,"Сохранить")}))}));Y.setEventListeners(),D.addEventListener("click",(function(){Y.open();var e=X.getUserInfo();N.value=e.name,F.value=e.about,K.resetValidation()})),M.addEventListener("click",(function(){Z.open(),Q.resetValidation()}));var Z=new C(".popup_type_avatar",(function(e){W.updateUserAvatar(e).then((function(e){X.setUserInfo(e),Z.close()})).catch((function(e){console.log(e)})).finally((function(){Z.renderLoading(!1,"Сохранить")}))}));Z.setEventListeners();var ee=new v(".popup_type_image");ee.setEventListeners();var te=new C(".popup_type_new-card",(function(e){W.postCards(e).then((function(e){B.prepend(oe(e)),te.close()})).catch((function(e){console.log(e)})).finally((function(){te.renderLoading(!1,"Создать")}))}));te.setEventListeners(),x.addEventListener("click",(function(){te.open(),$.resetValidation()}));var ne=new a({renderer:function(e){ne.addItem(oe(e))}},B);function re(e,t){ee.open(e,t)}function oe(e){var n=new t({item:e,handleCardClick:re,templateSelector:"#template-card",userId:T,handlerOpenDeletePopup:function(){return function(e){ie.open(),ie.handleFormDelete((function(){W.handlerdeleteCards(e.handlerCardIdReturn()).then((function(){e.handlerDeleteCard(),ie.close()})).catch((function(e){console.log(e)})).finally((function(){ie.renderLoading(!1)}))}))}(n)},handlerLikeAdd:function(){return function(e){W.changeLikeCard(e.cardId,e.likeContains()).then((function(t){e.handlerLike(t)})).catch((function(e){console.log(e)}))}(n)}});return n.generateCard()}Promise.all([W.getInitialCards(),W.getUserInfoFromServer()]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,u=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(u)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return z(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?z(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];T=i._id,ne.renderItems(o),X.setUserInfo(i)})).catch((function(e){console.log(e)}));var ie=new A(".popup_delete_image");ie.setEventListeners()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,